datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Your existing enums
enum CompanyType {
  SHOES
  WATCH
  PERFUMES
  GENERAL
}

enum NewsPriority {
  LOW
  MEDIUM
  HIGH
}

// MODIFIED User model for NextAuth
model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String? // Keep for credentials provider, optional for OAuth
  description   String?
  companyType   CompanyType @default(GENERAL)
  payment       String?
  signupDate    DateTime?   @default(now())

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  // NextAuth-required relations
  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NEW model for NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NEW model for NextAuth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NEW model for NextAuth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Your existing models (no changes needed)
model Company {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String
  industry      String
  instagram     String?
  twitter       String?
  facebook      String?
  growthTrends  String?
  topPosts      String?
  users         User[]
  products      Product[]
  news          News[]
  revenues      Revenue[]
  businessModel BusinessModel?
  overview      Overview?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Product {
  id           String    @id @default(cuid())
  name         String
  description  String
  pricing      Decimal
  keyFeatures  String[]
  productLinks String[]
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  aiReport     AIReport?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model News {
  id          String       @id @default(cuid())
  title       String
  description String
  sourceLink  String
  date        DateTime
  priority    NewsPriority @default(MEDIUM)
  companyId   String
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Revenue {
  id            String   @id @default(cuid())
  revenue       Decimal
  grossProfit   Decimal?
  netProfit     Decimal?
  grossMargin   Decimal?
  netMargin     Decimal?
  marketCap     Decimal?
  websiteVisits Int?
  quarter       Int
  year          Int
  companyId     String
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([companyId, quarter, year])
}

model BusinessModel {
  id              String   @id @default(cuid())
  revenueStreams  String[]
  keyPartnerships String[]
  costStructure   String[]
  pieChart        Json?
  companyId       String   @unique
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model AIReport {
  id          String   @id @default(cuid())
  strength    String
  weakness    String
  opportunity String
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Overview {
  id             String   @id @default(cuid())
  summary        String
  instaFollowers Int
  companyId      String   @unique
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
